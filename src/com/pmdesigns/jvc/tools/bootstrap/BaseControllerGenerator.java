/* This is a machine generated file. DO NOT EDIT. */
package com.pmdesigns.jvc.tools.bootstrap;

import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.dataflow.qual.Impure;
import java.util.*;

public class BaseControllerGenerator {

@Impure
public static String genPage(Map<String,String> map) {
StringBuilder _sb = new StringBuilder();
_sb.append("package ").append(_nf(map.get("package.prefix.dot"))).append("controllers;\n");
_sb.append("\n");
_sb.append("import java.util.Map;\n");
_sb.append("import com.pmdesigns.jvc.JVCRequestContext;\n");
_sb.append("import com.pmdesigns.jvc.tools.HtmlEncoder;\n");
_sb.append("\n");
_sb.append("public class BaseController {\n");
_sb.append("    public final JVCRequestContext rc;\n");
_sb.append("    public Map<String,String> errors;\n");
_sb.append("\n");
_sb.append("\n");
_sb.append("    public BaseController(JVCRequestContext rc) {\n");
_sb.append("        this.rc = rc;\n");
_sb.append("    }\n");
_sb.append("\n");
_sb.append("\n");
_sb.append("	/**\n");
_sb.append("	 * Form helper for text field inputs\n");
_sb.append("	 */\n");
_sb.append("	public String textInput(String name, String value, String html) {\n");
_sb.append("		StringBuilder sb = new StringBuilder();\n");
_sb.append("		sb.append(\"<input type='text' name='\").append(name).append(\"'\");\n");
_sb.append("		if (value != null) sb.append(\" value='\").append(HtmlEncoder.encode(value)).append(\"'\");\n");
_sb.append("		if (html != null) sb.append(\" \").append(html);\n");
_sb.append("		sb.append(\">\");\n");
_sb.append("		if (errors != null && errors.get(name) != null) {\n");
_sb.append("			sb.append(\"<span class='input_error'>\").append(HtmlEncoder.encode(errors.get(name))).append(\"</span>\");\n");
_sb.append("		}\n");
_sb.append("		return sb.toString();\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, Object value, String html) {\n");
_sb.append("		return textInput(name, (value == null ? \"\" : value.toString()), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, int value, String html) {\n");
_sb.append("		return textInput(name, Integer.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, short value, String html) {\n");
_sb.append("		return textInput(name, Short.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, long value, String html) {\n");
_sb.append("		return textInput(name, Long.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, float value, String html) {\n");
_sb.append("		return textInput(name, Float.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, double value, String html) {\n");
_sb.append("		return textInput(name, Double.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, char value, String html) {\n");
_sb.append("		return textInput(name, Character.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, byte value, String html) {\n");
_sb.append("		return textInput(name, Byte.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String name, boolean value, String html) {\n");
_sb.append("		return textInput(name, Boolean.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("\n");
_sb.append("	/**\n");
_sb.append("	 * Form helper for text field inputs that are part of a model object\n");
_sb.append("	 */\n");
_sb.append("	public String textInput(String modelVariable, String field, String value, String html) {\n");
_sb.append("		StringBuilder sb = new StringBuilder();\n");
_sb.append("		sb.append(\"<input type='text' name='\").append(modelVariable).append(\"[\").append(field).append(\"]'\");\n");
_sb.append("		if (value != null) sb.append(\" value='\").append(HtmlEncoder.encode(value)).append(\"'\");\n");
_sb.append("		if (html != null) sb.append(\" \").append(html);\n");
_sb.append("		sb.append(\">\");\n");
_sb.append("		if (errors != null && errors.get(field) != null) {\n");
_sb.append("			sb.append(\"<span class='input_error'>\").append(HtmlEncoder.encode(errors.get(field))).append(\"</span>\");\n");
_sb.append("		}\n");
_sb.append("		return sb.toString();\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, Object value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, (value == null ? \"\" : value.toString()), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, int value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Integer.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, short value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Short.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, long value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Long.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, float value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Float.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, double value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Double.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, char value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Character.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, byte value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Byte.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("	public String textInput(String modelVariable, String field, boolean value, String html) {\n");
_sb.append("		return textInput(modelVariable, field, Boolean.toString(value), html);\n");
_sb.append("	}\n");
_sb.append("\n");
_sb.append("	/**\n");
_sb.append("	 * Form helper for select inputs with string values\n");
_sb.append("	 */\n");
_sb.append("	public String selectInput(String name, String value, String[] names, String[] values) {\n");
_sb.append("		StringBuilder sb = new StringBuilder();\n");
_sb.append("		sb.append(\"<select name='\").append(name).append(\"'>n\");\n");
_sb.append("		int i=0;\n");
_sb.append("		for (String val : values) {\n");
_sb.append("			sb.append(\"<option value='\").append(val).append(\"'\");\n");
_sb.append("			if (val.equals(value)) sb.append(\" selected=true\");\n");
_sb.append("			sb.append(\">\").append(names[i++]).append(\"</option>n\");\n");
_sb.append("		}\n");
_sb.append("		sb.append(\"</select>n\");\n");
_sb.append("		return sb.toString();\n");
_sb.append("	}\n");
_sb.append("\n");
_sb.append("	/**\n");
_sb.append("	 * Form helper for select inputs with integer values\n");
_sb.append("	 */\n");
_sb.append("	public String selectInput(String name, int value, String[] names, int[] values) {\n");
_sb.append("		StringBuilder sb = new StringBuilder();\n");
_sb.append("		sb.append(\"<select name='\").append(name).append(\"'>n\");\n");
_sb.append("		int i=0;\n");
_sb.append("		for (int val : values) {\n");
_sb.append("			sb.append(\"<option value='\").append(val).append(\"'\");\n");
_sb.append("			if (val == value) sb.append(\" selected=true\");\n");
_sb.append("			sb.append(\">\").append(names[i++]).append(\"</option>n\");\n");
_sb.append("		}\n");
_sb.append("		sb.append(\"</select>n\");\n");
_sb.append("		return sb.toString();\n");
_sb.append("	}\n");
_sb.append("}\n");
_sb.append("\n");

return _sb.toString();
}
@Pure
private static String _nf(String x) { return (x == null) ? "" : x; }
}
